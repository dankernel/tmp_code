!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CPU_COUNT	code_analyze.h	34;"	d
EARG_NULL	errno.h	19;"	d
EFAIL_FUNC	errno.h	20;"	d
KEYWORD_NEXT_L_PARENTHESES	code_analyze.h	37;"	d
KEYWORD_NEXT_PADDING	code_analyze.h	35;"	d
KEYWORD_NEXT_PARENTHESES	code_analyze.h	36;"	d
KEYWORD_NEXT_R_PARENTHESES	code_analyze.h	38;"	d
LRU	lru.h	/^struct LRU$/;"	s
MAX_BUFF_SIZE	file_read.h	29;"	d
READ	lru.h	23;"	d
WRITE	lru.h	24;"	d
add_lnode	dk_list.h	/^struct dk_lnode *add_lnode(struct dk_list *list, void *p)$/;"	f
add_tnode	dk_tree.h	/^struct dk_tnode *add_tnode(struct dk_tree *tree, char *c)$/;"	f
analysis_arg	code_analyze.h	/^struct analysis_arg{$/;"	s
b_l	code_analyze.h	/^  int b_l;$/;"	m	struct:code_info
b_m	code_analyze.h	/^  int b_m;$/;"	m	struct:code_info
b_s	code_analyze.h	/^  int b_s;$/;"	m	struct:code_info
buf	file_read.h	/^  char *buf;$/;"	m	struct:file_info
buf_size	file_read.h	/^  int buf_size;$/;"	m	struct:file_info
c	dk_tree.h	/^  void *c;$/;"	m	struct:dk_tnode
cheek_code_line	code_analyze.h	/^char *cheek_code_line(char *str, struct dk_list *list, int option)$/;"	f
close_file_info	file_read.h	/^int close_file_info(struct file_info *s)$/;"	f
code_info	code_analyze.h	/^struct code_info$/;"	s
container_of	dk_kernel.h	20;"	d
count	dk_list.h	/^  int count;$/;"	m	struct:dk_list
count	dk_tree.h	/^  int count;$/;"	m	struct:dk_tree
ctrc_handler	handler.h	/^void ctrc_handler(int s)$/;"	f
disk_num	lru.h	/^  int disk_num;$/;"	m	struct:LRU
dk_list	dk_list.h	/^struct dk_list $/;"	s
dk_lnode	dk_list.h	/^struct dk_lnode$/;"	s
dk_tnode	dk_tree.h	/^struct dk_tnode$/;"	s
dk_tree	dk_tree.h	/^struct dk_tree$/;"	s
err_test	print_msg.h	24;"	d
f_count	code_analyze.h	/^  int f_count;$/;"	m	struct:code_info
f_list	code_analyze.h	/^  struct file_info *f_list;$/;"	m	struct:analysis_arg	typeref:struct:analysis_arg::file_info
f_maxline	code_analyze.h	/^  int f_maxline;$/;"	m	struct:code_info
f_minline	code_analyze.h	/^  int f_minline;$/;"	m	struct:code_info
f_name	code_analyze.h	/^  char *f_name;$/;"	m	struct:analysis_arg
fd	file_read.h	/^  int fd;$/;"	m	struct:file_info
file_info	file_read.h	/^struct file_info$/;"	s
file_size	file_read.h	/^  int file_size;$/;"	m	struct:file_info
get_file_line	code_analyze.h	/^int get_file_line(char *path)$/;"	f
gettid	code_analyze.h	/^static inline pid_t gettid (void)$/;"	f
head	dk_list.h	/^  struct dk_lnode *head;$/;"	m	struct:dk_list	typeref:struct:dk_list::dk_lnode
host	lru.h	/^  char *host;$/;"	m	struct:LRU
init_code_info	code_analyze.h	/^int init_code_info(struct code_info *c_info, char *file)$/;"	f
init_file_struct	file_read.h	/^int init_file_struct(struct file_info *info, char *path)$/;"	f
init_list	dk_list.h	/^struct dk_list *init_list(void)$/;"	f
init_lnode	dk_list.h	/^struct dk_lnode *init_lnode(void *val)$/;"	f
init_tnode	dk_tree.h	/^struct dk_tnode *init_tnode(void *val)$/;"	f
init_tree	dk_tree.h	/^struct dk_tree *init_tree(void)$/;"	f
l	dk_tree.h	/^  struct dk_tnode *l;$/;"	m	struct:dk_tnode	typeref:struct:dk_tnode::dk_tnode
l	dk_tree.h	/^  struct dk_tnode *l;$/;"	m	struct:dk_tree	typeref:struct:dk_tree::dk_tnode
line	code_analyze.h	/^  int line;$/;"	m	struct:code_info
line	file_read.h	/^  int line;$/;"	m	struct:file_info
list_str	code_analyze.h	/^char *list_str(struct dk_list *list, char *str)$/;"	f
lookup_list	dk_list.h	/^struct dk_lnode *lookup_list(struct dk_list *list, char *str)$/;"	f
lru_read	lru.h	/^int lru_read(char *path)$/;"	f
mutex	code_analyze.h	/^  pthread_mutex_t *mutex;$/;"	m	struct:analysis_arg
name	code_analyze.h	/^  char *name;$/;"	m	struct:code_info
next	dk_list.h	/^  struct dk_lnode *next;$/;"	m	struct:dk_lnode	typeref:struct:dk_lnode::dk_lnode
next_lnode	dk_list.h	/^struct dk_lnode *next_lnode(struct dk_list *list)$/;"	f
num	code_analyze.h	/^  int num;$/;"	m	struct:analysis_arg
offset	lru.h	/^  long offset;$/;"	m	struct:LRU
offsetof	dk_kernel.h	18;"	d
open_file	file_read.h	/^int open_file(char *path)$/;"	f
p	dk_list.h	/^  int *p;$/;"	m	struct:dk_lnode
p	dk_tree.h	/^  struct dk_tnode *p;$/;"	m	struct:dk_tnode	typeref:struct:dk_tnode::dk_tnode
path	file_read.h	/^  char *path;$/;"	m	struct:file_info
prev	dk_list.h	/^  struct dk_lnode *prev;$/;"	m	struct:dk_lnode	typeref:struct:dk_lnode::dk_lnode
print_f	print_msg.h	20;"	d
print_list	dk_list.h	/^int print_list(struct dk_list *list)$/;"	f
print_node	dk_list.h	/^inline void print_node(struct dk_lnode *n)$/;"	f
print_o	print_msg.h	21;"	d
print_tnode	dk_tree.h	/^inline void print_tnode(struct dk_tnode *n)$/;"	f
r	dk_tree.h	/^  struct dk_tnode *r;$/;"	m	struct:dk_tnode	typeref:struct:dk_tnode::dk_tnode
r	dk_tree.h	/^  struct dk_tnode *r;$/;"	m	struct:dk_tree	typeref:struct:dk_tree::dk_tnode
r_cache	dk_list.h	/^  struct dk_lnode *r_cache;$/;"	m	struct:dk_list	typeref:struct:dk_list::dk_lnode
r_cache	dk_tree.h	/^  struct dk_tnode *r_cache;$/;"	m	struct:dk_tree	typeref:struct:dk_tree::dk_tnode
read_file	code_analyze.h	/^int *read_file(char *path)$/;"	f
read_next_line	file_read.h	/^char *read_next_line(struct file_info *info)$/;"	f
read_token_line	file_read.h	/^char *read_token_line(struct file_info *info, int column, char token)$/;"	f
remove_list	dk_list.h	/^int remove_list(struct dk_list *list)$/;"	f
remove_lnode	dk_list.h	/^int remove_lnode(struct dk_lnode *n)$/;"	f
respone	lru.h	/^  long respone; \/\/respones time$/;"	m	struct:LRU
result	file_read.h	/^  char *result;$/;"	m	struct:file_info
root	dk_tree.h	/^  struct dk_tnode *root;$/;"	m	struct:dk_tree	typeref:struct:dk_tree::dk_tnode
seek	file_read.h	/^  int seek;$/;"	m	struct:file_info
signal_handler	handler.h	/^int signal_handler(void)$/;"	f
size	lru.h	/^  long size;$/;"	m	struct:LRU
str_contain	dk_str.h	/^int str_contain(char *str, char c)$/;"	f
swap_list	dk_list.h	/^int swap_list(struct dk_lnode *l1, struct dk_lnode *l2)$/;"	f
tail	dk_list.h	/^  struct dk_lnode *tail;$/;"	m	struct:dk_list	typeref:struct:dk_list::dk_lnode
time	lru.h	/^  char *time;$/;"	m	struct:LRU
type	lru.h	/^  int type;$/;"	m	struct:LRU
w_cache	dk_list.h	/^  struct dk_lnode *w_cache;$/;"	m	struct:dk_list	typeref:struct:dk_list::dk_lnode
w_cache	dk_tree.h	/^  struct dk_tnode *w_cache;$/;"	m	struct:dk_tree	typeref:struct:dk_tree::dk_tnode
